#!/bin/sh
#
# (a) 2006 nolar@numeri.net
#
# ...
#

# Подключаем конфиг. Должен быть указан!
[ -f "$1" -a -r "$1" ] || { echo "Must specify config file as first parameter."	>&2; exit 3; }
. "$1"

# Проверяем что каталоги существуют, что они читабельны и доступны на запись.
[ -z "$lckdir" ] && { echo "Lock directory does not specified. Bye."		>&2; exit 2; }
[ -d "$lckdir" ] || { echo "Directory '$lckdir' does not exist. Bye."		>&2; exit 2; }
[ -r "$lckdir" ] || { echo "Directory '$lckdir' is not readable. Bye."		>&2; exit 2; }
[ -w "$lckdir" ] || { echo "Directory '$lckdir' is not writeable. Bye."		>&2; exit 2; }
[ -z "$tmpdir" ] && { echo "Temporary directory does not specified. Bye."	>&2; exit 2; }
[ -d "$tmpdir" ] || { echo "Directory '$tmpdir' does not exist. Bye."		>&2; exit 2; }
[ -r "$tmpdir" ] || { echo "Directory '$tmpdir' is not readable. Bye."		>&2; exit 2; }
[ -w "$tmpdir" ] || { echo "Directory '$tmpdir' is not writeable. Bye."		>&2; exit 2; }
[ -z "$newdir" ] && { echo "New-traffic directory does not specified. Bye."	>&2; exit 2; }
[ -d "$newdir" ] || { echo "Directory '$newdir' does not exist. Bye."		>&2; exit 2; }
[ -r "$newdir" ] || { echo "Directory '$newdir' is not readable. Bye."		>&2; exit 2; }
[ -w "$newdir" ] || { echo "Directory '$newdir' is not writeable. Bye."		>&2; exit 2; }

# Проверяем наличие нужных нам параметров настройки.
[ -z "$identifier"   ] && { echo "Identifier does not specified. Bye."		>&2; exit 2; }
[ -z "$qmailhistory" ] && { echo "QMail history file does not specified. Bye."	>&2; exit 2; }

# Проверяем, надо ли забрасывать трафик сразу после его сборки из qmailanalog/matchup.
# Исправляем значение на то, которое нам позже легче будет проверить.
case "$autoinject" in
	[Yy][Ee][Ss]|[Tt][Rr][Uu][Ee]|[Oo][Nn]|1)     autoinject="1";;
	[Nn][Oo]|[Ff][Aa][Ll][Ss][Ee]|[Oo][Ff][Ff]|0) autoinject="" ;;
	*) echo "Autoinject has wrong value '$autoinject'."			>&2; exit 2;;
esac

# Защищаем файлы с почтовым трафиком от стороннего их прочтения. Просто защиты по правам
# каталогов недостаточно, так как пользователи системы могут создать жесткий линк на
# i-node файла, и получить к нему доступ, если с файла явно не сняты общие права.
umask 077

# Проверяем, было ли указано вторым параметром ключевое (не секретное, а просто ключевое)
# слово. Если это слово было указано, то мы считаем что нас запустили на получение трафика.
# Причем обо всех lock'ах уже позаботились и вторая копия скрипта не запустится.
if [ "$2" = "do" ] ; then

	# Составляем уникальное имя для временного файла с логом, а также для файла
	# с итоговым отчетом до того, как он будет помещен в чистовой каталог.
	stamp=`date +%Y%m%d%H%M%S` \
		|| { echo "Failed to get current stamp."			>&2; exit 1; }
	teefile="$tmpdir/$stamp.$identifier.m.$$.teed"
	tmpfile="$tmpdir/$stamp.$identifier.m.$$.temp"
	newfile="$newdir/$stamp.$identifier.m.$$.data"

	# Удаляем временные файлы, если они существуют. Но существовать они не должны,
	# потому что в составлении их имени принимают участие время и pid процесса, и
	# повтор возможен только если в пределах той же секунды этот файл был создан
	# скриптом с тем же pid, что и мы сами, и при этом не был удален или перемещен.
	# Вероятность такого стремится к нулю.
	{ [ ! -e "$teefile" ] || rm -rf "$teefile"; } \
		|| { echo "Failed to remove '$teefile'."			>&2; exit 1; }
	{ [ ! -e "$tmpfile" ] || rm -rf "$tmpfile"; } \
		|| { echo "Failed to remove '$tmpfile'."			>&2; exit 1; }

	# Создаем временные файлы. Если создание файлов не удалось, то вылетаем по ошибке
	# именно здесь, а не дожидаемся такого же вылета далее в скрипте.
	touch "$teefile" \
		|| { echo "Failed to create file '$teefile'."			>&2; exit 1; }
	touch "$tmpfile" \
		|| { echo "Failed to create file '$tmpfile'."			>&2; exit 1; }

	# Обрабатываем основной поток информации. Для этого всю информацию просто
	# копируем из stdin в stdout без изменений, но при этом записываем ее во
	# временный файл с логом. Оттуда мы ее и будем позже анлизировать.
	tee -a "$teefile" \
		|| { echo "Failed to tee into '$teefile'."			>&2; exit 1; }

	# Склеиваем ранее сохраненную базу с промежуточной информацией (а она уже с
	# фрактальными метками времени) со свежеполученным лог-файлом (причем преобразуем
	# в нем временнЫе метки к фрактальному виду), и все это скармливаем matchup'у.
	# А то, что вернет matchup, сохраняем во временный файл результата. При этом не
	# забываем новые промежуточные данные сохранить для будущего использования.
	{
		if [ -f "$qmailhistory" ] ; then
			cat "$qmailhistory" \
			|| { echo "Failed to cat traffic from '$qmailhistory'."	>&2; exit 1; }
		fi
		
		if [ -f "$teefile" ] ; then
			tai64nfrac <"$teefile" \
			|| { echo "Failed to frac&cat traffic from '$teefile'."	>&2; exit 1; }
		fi
	} | /var/qmail/qmailanalog/bin/matchup 1>>"$tmpfile" 5>"$qmailhistory.new" \
		|| { echo "Failed to matchup traffic into '$tmpfile'."		>&2; exit 1; }
	
	# Замещаем старый файл промежуточных данных свежесгенерированным.
	mv -f "$qmailhistory.new" "$qmailhistory" \
		|| { echo "Failed to move '$qmailhistory.new' to '$qmailhistory'." >&2; exit 1; }

	# Перемеиновывем временый файл почтовой статистики в итоговый.
	mv -f "$tmpfile" "$newfile" \
		|| { echo "Can not move '$tmpfile' to '$newfile'."		>&2; exit 1; }

	# Удаляем временный файл - он нам больше не нужен. При ошибке удаления никакого
	# особого кода не возвращаем. Все прекрасно и без этого удаления.
	rm -f "$teefile" \
		|| { echo "Failed to remove '$teefile'."			>&2;         }
	
	# Успешно выходим.
	exit 0

# Если же нас запустили без правильного второго параметра, то считаем что мы
# должны организовать все необходимые lock'и и перезапустить себя с правильным
# ключевым словом во втором параметре.
else

	# Составляем уникальное имя для lock-файла.
	lckfile="$lckdir/matchup.$identifier.lock"

	# Запускаем себя же, но уже под lock'ом , чтобы избежать параллельных процессов.
	lockf -k -s -t 0 "$lckfile" "$0" "$1" "do"

	# Запоминаем с каким статусом вышел основной скрипт.
	status="$?"

	# Складываем трафик в базу сразу после его сбора, если нас попросили (в конфиге).
	# Делаем это вне собственного lock'а, чтобы можно было запустить параллельную
	# копию самого себя для сбора нового трафика, а складывание трафика чтобы этому
	# запуску не помешало бы. Но при этом возможна блокировка по той причине, что
	# multilog будет ждать когда завершится процессор файла, а потому блокировать
	# прием сообщений. Для почты включать автозакидывание крайне не рекомендуется.
	[ -z "$autoinject" ] || traffic_inject_mysql "$1"

	# Выходим с запомненным ранее статусом основного скрипта.
	exit "$status"

fi

#
# Все.
#