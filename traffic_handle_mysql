#!/bin/sh
#
# (a) 2006 nolar@numeri.net
#
# Скрипт обработки трафика в базе данны MySQL.
# Скрипт не имеет привязок к интерфейсу и обрабатывает весь трафик, накопленный в таблице
# базы данных на момент его запуска (точнее, начала транзакции обработки). Он, главным
# образом, делает поля src/dst ссылающимися на записи в таблице address по критериям
# принадлежности адреса адресной группе и времени актуальности адреса. Причем при
# изменении таблицы адресов автоматически при первой же обработке вызывается пересчет
# этих полей для записей трафика, которых это изменение могло бы коснуться.
# Частота обработки трафика задается где-нибудь извне, например в cron. В один и тот же
# момент времени работает только один процесс обработки, так что дублирующей обработки
# базы и взаимной блокировки таблиц не случится.
#
# Первым и обязательным параметром принимает имя файла с настройками.
#

# Подключаем конфиг. Должен быть указан!
[ -f "$1" -a -r "$1" ] || { echo "Must specify config file as first parameter."	>&2; exit 3; }
. "$1"

# Проверяем что каталоги существуют, что они читабельны и доступны на запись.
[ -z "$lckdir" ] && { echo "Lock directory does not specified. Bye."		>&2; exit 2; }
[ -d "$lckdir" ] || { echo "Directory '$lckdir' does not exist. Bye."		>&2; exit 2; }
[ -r "$lckdir" ] || { echo "Directory '$lckdir' is not readable. Bye."		>&2; exit 2; }
[ -w "$lckdir" ] || { echo "Directory '$lckdir' is not writeable. Bye."		>&2; exit 2; }
[ -z "$sqldir" ] && { echo "SQL-script directory does not specified. Bye."	>&2; exit 2; }
[ -d "$sqldir" ] || { echo "Directory '$sqldir' does not exist. Bye."		>&2; exit 2; }
[ -r "$sqldir" ] || { echo "Directory '$sqldir' is not readable. Bye."		>&2; exit 2; }
[ -w "$sqldir" ] || { echo "Directory '$sqkdir' is not writeable. Bye."		>&2; exit 2; }

# Проверяем наличие нужных нам параметров настройки.
[ -z "$identifier" ] && { echo "Identifier does not specified. Bye."		>&2; exit 2; }

# Защищаем файлы с сырым трафиком от стороннего их прочтения. Просто защиты по правам
# каталогов недостаточно, так как пользователи системы могут создать жесткий линк на
# i-node файла, и получить к нему доступ, если с файла явно не сняты общие права.
umask 077

# Проверяем, было ли указано вторым параметром ключевое (не секретное, а просто ключевое)
# слово. Если это слово было указано, то мы считаем что нас запустили на обработку трафика.
# Причем обо всех lock'ах уже позаботились и вторая копия скрипта не запустится.
if [ "$2" = "do" ] ; then

	#...
	rangeclause=`mysql "--defaults-extra-file=$mysql_config" --batch --silent --skip-column-names \
			--exec='
				select
					date_format(ifnull(actual_from ,from_unixtime(0)), "%Y%m%d%H%i%s"),
					date_format(ifnull(actual_till ,now()           ), "%Y%m%d%H%i%s"),
					date_format(ifnull(actual_from_,from_unixtime(0)), "%Y%m%d%H%i%s"),
					date_format(ifnull(actual_till_,now()           ), "%Y%m%d%H%i%s")
				  from address where stamp_modify > stamp_process or stamp_process is null;
			' \
		| awk '
			BEGIN { count=0; }
			{
				printf((count>0?" or ":"") "(flowed between \"%s\" and \"%s\")", $1, $2); count++;
				printf((count>0?" or ":"") "(flowed between \"%s\" and \"%s\")", $3, $4); count++;
			}
			END { if (count == 0) printf("1=0"); }
		'`

	# Выполняем пост-обработку трафика в базе (всего свежезакинутого и просто
	# сменившего статус на неопределенный по иным причинам или для изменившихся
	# адресных групп).
	# Обработки заключается в идентификации трафика по источнику и назначению, и присвоении полям
	# src & dst соответствующих значений (ссылок на записи таблицы местоположений сети). Бр-р-р...
	mysql "--defaults-extra-file=$mysql_config" <<-EOSQL \
		|| { echo "Failed to execute SQL handling."			>&2; exit 1; } 

		/* Все делать под единой транзакцией. */
		start transaction;
		
		/* Обновляем адресные структуры, чтобы они были наверняка точными. */
		/* Также маркируем все свежеизмененные адреса как обработанные. */
		update address set
			ipv4_from = ipv4address - ipv4address % pow(2,32-ipv4masklen),
			ipv4_till = ipv4address - ipv4address % pow(2,32-ipv4masklen)
					+ (pow(2,32)-1) % pow(2,32-ipv4masklen),
			actual_from_ = actual_from,
			actual_till_ = actual_till,
			stamp_modify = current_timestamp,
			stamp_process = stamp_modify
		 where stamp_modify > stamp_process or stamp_process is null;

		/* Обновляем поля src & dst сходными запросами. */
		/* Тут надо медитировать, чтобы понять. */
		update traffic set
			src = (
				select address from address
				 where (traffic.srchost between ipv4_from and ipv4_till)
				   and (actual_from is null or actual_from <= traffic.flowed)
				   and (actual_till is null or actual_till >  traffic.flowed)
				 order by ipv4masklen desc limit 1
			      ),
			dst = (
				select address from address
				 where (traffic.dsthost between ipv4_from and ipv4_till)
				   and (actual_from is null or actual_from <= traffic.flowed)
				   and (actual_till is null or actual_till >  traffic.flowed)
				 order by ipv4masklen desc limit 1
			      )
			where src is null or dst is null or ($rangeclause);

		/* Завершаем транзакцию, если не вывалились по ошибке. */
		commit;
EOSQL

	# Успешно выходим.
	exit 0

# Если же нас запустили без правильного второго параметра, то считаем что мы
# должны организовать все необходимые lock'и и перезапустить себя с правильным
# ключевым словом во втором параметре.
else

	# Составляем уникальное имя для lock-файла.
	lckfile="$lckdir/handle.$identifier.lock"

	# Запускаем себя же, но уже под lock'ом , чтобы избежать параллельных забросок
	# трафика того же интерфейса, что и мы сами. Иначе будет плохо.
	lockf -k -s -t 0 "$lckfile" "$0" "$1" "do"

	# Запоминаем с каким статусом вышел основной скрипт.
	status="$?"

	# Выходим с запомненным ранее статусом основного скрипта.
	exit "$status"

fi

#
# Все.
#