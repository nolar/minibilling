#!/bin/sh
#
# (a) 2006 nolar@numeri.net
#
# Скрипт заброски трафика из текстовых файлов формата ngipacct в базу данных MySQL.
# В другие СУБД пусть закидывают другие скрипты. Переделать очень легко, кстати.
# Очень и очень желательно чтобы таблица с трафиком поддерживала транзакции. Иначе при
# возникновении ошибок неминуемо дублирование трафика из-за отсутствия механизма отката.
# Частота заброски трафика задается где-нибудь извне, например в cron. В один и тот же
# момент времени для одного интерфейса работает только один процесс заброски, так что
# дублирующей обработки файлов не случится. А за счет предварительной подготовки списка
# файлов, которые будут заброшены в базу, не случится и потери данных. Исключая, конечно,
# случаи сбоя файловой системы из-за, например, внезапных перезагрузок системы, скачков
# питания и т.п.
#
# Первым и обязательным параметром принимает имя файла с настройками.
#
# Структура таблицы, которую скрипт ожидает увидеть (по крайней мере имена и тип столбцов):
#
#	create table `traffic` (
#		`written`	datetime		not null,
#		`started`	datetime		not null,
#		`direction`	bit			    null,
#		`interface`	tinyint  unsigned	not null,
#		`srchost`	integer  unsigned	not null,
#		`dsthost`	integer  unsigned	not null,
#		`protocol`	smallint unsigned	not null,
#		`srcport`	smallint unsigned	not null,
#		`dstport`	smallint unsigned	not null,
#		`userid`	smallint unsigned	    null,
#		`bytes`		bigint   unsigned	not null,
#		`packets`	bigint   unsigned	not null
#	) engine=innodb default charset=latin1;
#
#	create table `mail` (
#		`injected`	timestamp		not null default current_timestamp,
#		`status`	char(1)			not null ,
#		`birth`		datetime		not null ,
#		`dstart`	datetime		not null ,
#		`ddone`		datetime		not null ,
#		`userid`	smallint unsigned	    null ,
#		`queueid`	integer  unsigned	    null ,
#		`channel`	varchar(255)		    null ,
#		`sender_box`	varchar(255)		    null ,
#		`sender_dom`	varchar(255)		    null ,
#		`recipient_box`	varchar(255)		    null ,
#		`recipient_dom`	varchar(255)		    null ,
#		`bytes`		bigint   unsigned	not null ,
#		`reason`	mediumtext		not null
#	) engine=innodb default charset=latin1;
#


# Подключаем конфиг. Должен быть указан!
[ -f "$1" -a -r "$1" ] || { echo "Must specify config file as first parameter."	>&2; exit 3; }
. "$1"

# Проверяем что каталоги существуют, что они читабельны и доступны на запись.
[ -z "$lckdir" ] && { echo "Lock directory does not specified. Bye."		>&2; exit 2; }
[ -d "$lckdir" ] || { echo "Directory '$lckdir' does not exist. Bye."		>&2; exit 2; }
[ -r "$lckdir" ] || { echo "Directory '$lckdir' is not readable. Bye."		>&2; exit 2; }
[ -w "$lckdir" ] || { echo "Directory '$lckdir' is not writeable. Bye."		>&2; exit 2; }
[ -z "$sqldir" ] && { echo "SQL-script directory does not specified. Bye."	>&2; exit 2; }
[ -d "$sqldir" ] || { echo "Directory '$sqldir' does not exist. Bye."		>&2; exit 2; }
[ -r "$sqldir" ] || { echo "Directory '$sqldir' is not readable. Bye."		>&2; exit 2; }
[ -w "$sqldir" ] || { echo "Directory '$sqkdir' is not writeable. Bye."		>&2; exit 2; }
[ -z "$newdir" ] && { echo "New-traffic directory does not specified. Bye."	>&2; exit 2; }
[ -d "$newdir" ] || { echo "Directory '$newdir' does not exist. Bye."		>&2; exit 2; }
[ -r "$newdir" ] || { echo "Directory '$newdir' is not readable. Bye."		>&2; exit 2; }
[ -w "$newdir" ] || { echo "Directory '$newdir' is not writeable. Bye."		>&2; exit 2; }
[ -z "$olddir" ] && { echo "Old-traffic directory does not specified. Bye."	>&2; exit 2; }
[ -d "$olddir" ] || { echo "Directory '$olddir' does not exist. Bye."		>&2; exit 2; }
[ -r "$olddir" ] || { echo "Directory '$olddir' is not readable. Bye."		>&2; exit 2; }
[ -w "$olddir" ] || { echo "Directory '$olddir' is not writeable. Bye."		>&2; exit 2; }

# Проверяем наличие нужных нам параметров настройки.
[ -z "$identifier" ] && { echo "Identifier name does not specified. Bye."	>&2; exit 2; }
[ -z "$interface"  ] && { echo "Interface code does not specified. Bye."	>&2; exit 2; }

# Проверяем, надо ли обрабатывать трафик сразу после заброски его в базу.
# Исправляем значение на то, которое нам позже легче будет проверить.
case "$autohandle" in
	[Yy][Ee][Ss]|[Tt][Rr][Uu][Ee]|[Oo][Nn]|1)     autohandle="1";;
	[Nn][Oo]|[Ff][Aa][Ll][Ss][Ee]|[Oo][Ff][Ff]|0) autohandle="" ;;
	*) echo "Autohandle has wrong value '$autohandle'."			>&2; exit 2;;
esac

# Защищаем файлы с сырым трафиком от стороннего их прочтения. Просто защиты по правам
# каталогов недостаточно, так как пользователи системы могут создать жесткий линк на
# i-node файла, и получить к нему доступ, если с файла явно не сняты общие права.
umask 077

# Проверяем, было ли указано вторым параметром ключевое (не секретное, а просто ключевое)
# слово. Если это слово было указано, то мы считаем что нас запустили на заброску трафика.
# Причем обо всех lock'ах уже позаботились и вторая копия скрипта не запустится.
if [ "$2" = "do" ] ; then

	# Подготавливаем текст SQL-сценария заброски. Именно текст. Реальные его запуски,
	# а также указание переменных скрипта будут производиться чуть позже. SQL-текст
	# нам нужен заранее чтобы ен дублировать его отдельно для заброски входящего,
	# и отдельно - для исходящего трафика.
	awk_io='
		function sqlvalue (value) {
			if (value == "") {
				return "null";
			} else {
				gsub(/\"/, "\\\"", value);
				return "\"" value "\"";
			}
		}
		BEGIN {
			FS="[ \t]+";
			headered=0;
		}
		/[tT]hreshold/ {
			print $0 |"logger -p user.err -t traffic";
			next;
		}
		/^DIRECTION/ {
			direction=$2;
			next;
		}
		{
			if (!headered)
			{
				printf("insert high_priority into `traffic` (`%s`,`%s`,`%s`,`%s`,`%s`,`%s`,`%s`,`%s`,`%s`,`%s`,`%s`) values\n",
					"flowed",
					"interface",
					"direction",
					"protocol",
					"srchost",
					"dsthost",
					"srcport",
					"dstport",
					"userid",
					"bytes",
					"packets");
			}
				printf((headered?",":" ") "(from_unixtime(%s),%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)\n",
					sqlvalue($9),
					sqlvalue(interface),
					sqlvalue(direction),
					sqlvalue($5),
					sqlvalue($1),
					sqlvalue($3),
					sqlvalue($2),
					sqlvalue($4),
					sqlvalue($8=="-1"?"":$8),
					sqlvalue($7),
					sqlvalue($6));
			headered=1;
			next;
		}
		END {
			if(headered)
			{
				printf(";\n");
			}
		}
	'
	awk_m='
		function sqlvalue (value) {
			if (value == "") {
				return "null";
			} else {
				gsub(/\"/, "\\\"", value);
				return "\"" value "\"";
			}
		}
		BEGIN {
			FS="[ \t]+";
			headered=0;
		}
		/^d / {
			p = index($8, ".");
			channel = p ? substr($8, 1, p-1) : ""; 
			recipient_dom = substr($8, p+1);
			recipient_box = "";
			if (recipient_dom == "?") recipient_dom=""; else {
				havedog = 0;
				while (a = index(recipient_dom, "@")) {
					havedog = 1;
					recipient_box = recipient_box substr(recipient_dom, 1, a);
					recipient_dom = substr(recipient_dom, a+1);
				}
				if (havedog) {
					recipient_box = substr(recipient_box, 1, length(recipient_box)-1);
					if ((channel == "local") && (index(recipient_box, recipient_dom "-") == 1))
						recipient_box = substr(recipient_box, length(recipient_dom)+2);
				} else {
					recipient_box = recipient_dom;
					recipient_dom = "";
				}
			}
			sender_dom = substr($7, 2, length($7)-2);
			sender_box = "";
			if (sender_dom == "?") sender_dom=""; else {
				havedog = 0;
				while (a = index(sender_dom, "@")) {
					havedog = 1;
					sender_box = sender_box substr(sender_dom, 1, a);
					sender_dom = substr(sender_dom, a+1);
				}
				if (havedog) {
					sender_box = substr(sender_box, 1, length(sender_box)-1);
				} else {
					sender_box = sender_dom;
					sender_dom = "";
				}
			}
			if (!headered)
			{
				printf("insert high_priority into `mail` (`%s`,`%s`,`%s`,`%s`,`%s`,`%s`,`%s`,`%s`,`%s`,`%s`,`%s`,`%s`,`%s`) values\n",
					"status",
					"birth",
					"dstart",
					"ddone",
					"userid",
					"queueid",
					"channel",
					"sender_box",
					"sender_dom",
					"recipient_box",
					"recipient_dom",
					"bytes",
					"reason");
			}
				printf((headered?",":" ") "(%s,from_unixtime(%s),from_unixtime(%s),from_unixtime(%s),%s,%s,%s,%s,%s,%s,%s,%s,%s)\n",
					sqlvalue($2),
					sqlvalue($3),
					sqlvalue($4),
					sqlvalue($5),
					sqlvalue($10=="?"?"":$10),
					sqlvalue($9 =="?"?"":$9 ),
					sqlvalue(channel),
					sqlvalue(sender_box),
					sqlvalue(sender_dom),
					sqlvalue(recipient_box),
					sqlvalue(recipient_dom),
					sqlvalue(0+$6),
					sqlvalue($11));
			headered=1;
			next;
		}
		/^m / {
			next;
		}
		{ next; }
		END {
			if(headered)
			{
				printf(";\n");
			}
		}
	'

	# Заранее составляем список всех файлов с трафиком, которые мы будем закидывать.
	# Это нужно сделать чтобы все дальнейшие операции происходили над одним и тем же
	# набором файлов, а не составлялись бы каждый раз по маске.  Иначе мы рискуем,
	# например, удалить лишние файлы трафика, которые появятся пока мы будем
	# забрасывать имеющиеся. Кроме того, разделяем файлы по направлению трафика.
	ilist=`find "$newdir" -name "*.$identifier.i.*.data" -execdir echo "{}" \;` \
		|| { echo "Failed to enumerate i-files in '$newdir'."		>&2; exit 1; }
	olist=`find "$newdir" -name "*.$identifier.o.*.data" -execdir echo "{}" \;` \
		|| { echo "Failed to enumerate o-files in '$newdir'."		>&2; exit 1; }
	mlist=`find "$newdir" -name "*.$identifier.m.*.data" -execdir echo "{}" \;` \
		|| { echo "Failed to enumerate m-files in '$newdir'."		>&2; exit 1; }

	# Составляем уникальное имя для файла SQL-сценария из текущей даты-времени,
	# имени интерфейса, для которого собирался трафик и pid текущего процесса для
	# пущей надежности (все равно SQL-файл по задумке временный).
	stamp=`date +%Y%m%d%H%M%S` \
		|| { echo "Failed to get current stamp."			>&2; exit 1; }
	sqlfile="$sqldir/$stamp.$identifier.$$.mysql"

	# Создаем или пересоздаем этот файл. Перед созданием удаляем его, чем бы он ни был.
	{ [ ! -e "$sqlfile" ] || rm -rf "$sqlfile"; }	\
		|| { echo "Failed to remove '$sqlfile'."			>&2; exit 1; }
	touch "$sqlfile" \
		|| { echo "Failed to create file '$sqlfile'."			>&2; exit 1; }

	# Выполнение сценария начинаем стартом транзакции.
	echo "start transaction;" >> "$sqlfile" \
		|| { echo "Can not write to '$sqlfile'."			>&2; exit 1; }

	# Перебираем все архивные файлы трафика и каждый файл передаем общему скрипту
	# генерации SQL-запроса. В скрипт передаем специально обрабатываемые им команды
	# по направлению трафика (строка, где первое слово - DIRECTION, а второе - новое
	# значение направления).
	{
		echo "DIRECTION 0" \
		|| { echo "Failed to feed control line into SQL generator."	>&2; exit 1; }
		for file in $ilist ; do
		cat "$newdir/$file" \
		|| { echo "Failed to feed file '$file' into SQL generator."	>&2; exit 1; }
		done

		echo "DIRECTION 1" \
		|| { echo "Failed to feed control line into SQL generator."	>&2; exit 1; }
		for file in $olist ; do
		cat "$newdir/$file" \
		|| { echo "Failed to feed file '$file' into SQL generator."	>&2; exit 1; }
		done
	} | awk -v "interface=$interface" "$awk_io" >> "$sqlfile" \
		|| { echo "Failed to generate SQL into file '$sqlfile'."	>&2; exit 1; }

	# Перебираем все файлы почтового трафика, и каждый файл передаем скрипту
	# генерации SQL-запроса.
	{
		for file in $mlist ; do
		cat "$newdir/$file" \
		|| { echo "Failed to feed file '$file' into SQL generator."	>&2; exit 1; }
		done
	} | awk "$awk_m" >> "$sqlfile" \
		|| { echo "Failed to generate SQL into file '$sqlfile'."	>&2; exit 1; }

	# А завершаем сценарий утверждением транзакции (commit).
	echo "commit;" >> "$sqlfile" \
		|| { echo "Can not write to '$sqlfile'."			>&2; exit 1; }

	# Если SQL-сценарий успешно сгенерирован, то пытаемся забросить его в базу данных.
	mysql "--defaults-extra-file=$mysql_config" < "$sqlfile" \
		|| { echo "Failed to execute SQL from file '$sqlfile'."		>&2; exit 1; }

	# И в случае успешной заброски в базу, перемещаем все файлы с трафиком в каталог
	# уже обработанных файлов и удаляем файл SQL-сценария. В случае ошибок игнорируем
	# их, но администратору все-таки сообщаем. Иначе возникнет дублирующийся трафик.
	rm -rf "$sqlfile" \
		|| { echo "Can not remove '$sqlfile'."				>&2; }
	for file in $ilist $olist $mlist ; do
		mv -f "$newdir/$file" "$olddir/$file" \
		|| { echo "Can not move '$newdir/$file' to '$olddir/$file'. POSSIBLE DUPLICATE TRAFFIC!" >&2; }
	done

	# Успешно выходим.
	exit 0

# Если же нас запустили без правильного второго параметра, то считаем что мы
# должны организовать все необходимые lock'и и перезапустить себя с правильным
# ключевым словом во втором параметре.
else

	# Составляем уникальное имя для lock-файла.
	lckfile="$lckdir/inject.$identifier.lock"

	# Запускаем себя же, но уже под lock'ом , чтобы избежать параллельных забросок
	# трафика того же интерфейса, что и мы сами. Иначе будет плохо.
	lockf -k -s -t 0 "$lckfile" "$0" "$1" "do"
	
	# Запоминаем с каким статусом вышел основной скрипт.
	status="$?"

	# Обрабатываем трафик сразу после заброски в базу, если нас попросили (в конфиге).
	# Делаем это вне собственного lock'а, чтобы можно было запустить параллельную
	# копию самого себя для заброски нового трафика, а обработка трафика чтобы этому
	# запуску не помешала бы.
	[ -z "$autohandle" ] || traffic_handle_mysql "$1"

	# Выходим с запомненным ранее статусом основного скрипта.
	exit "$status"

fi

#
# Все.
#